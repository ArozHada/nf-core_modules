nextflow_process {

    name "Test Process TABIX_BGZIP"
    script "modules/nf-core/tabix/bgzip/main.nf"
    process "TABIX_BGZIP"

    test("sarscov2_vcf_bgzip_compress") {

        when {
            process {
                """
                input[0] = [
                                [ id:'test' ],
                                [ file(params.test_data['sarscov2']['illumina']['test_vcf'], checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("homo_genome_bedgz_compress") {
        when {
            process {
                """
                input[0] = [
                            [ id:'test' ],
                            [ file(params.test_data['homo_sapiens']['genome']['genome_bed_gz'], checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("sarscov2_vcf_bgzip_compress_gzi") {
        config "./bgzip_compress.config"
        when {
            process {
                """
                input[0] = [
                                [ id:'test' ],
                                [ file(params.test_data['sarscov2']['illumina']['test_vcf'], checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("sarscov2_vcf_bgzip_compress_stub") {
        config "./vcf_none.config"
        options '-stub'
        when {
            process {
                """
                input[0] = [
                                [ id:'test' ],
                                [ file(params.test_data['sarscov2']['illumina']['test_vcf'], checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
