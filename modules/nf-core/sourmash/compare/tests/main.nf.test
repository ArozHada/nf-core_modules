nextflow_process {

    name "Test Process SOURMASH_COMPARE"
    script "../main.nf"
    process "SOURMASH_COMPARE"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "sourmash"
    tag "sourmash/compare"
    tag "sourmash/sketch"

    setup {
        run("SOURMASH_SKETCH") {
            script "../../sketch/main.nf"
            process {
            """
            input[0] = Channel.fromList([
                        [ [ id:'test1', single_end:false ], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true) ],
                        [ [ id: 'test2', single_end:false ], file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true) ]
            ])
            """
            }
        }
    }

    test("sarscov2 genome [fasta]") {

        when {
            process {
                """
                input[0] = SOURMASH_SKETCH.out.signatures.collect { it[1] }.map { signatures ->
                                                                                    def meta = [:]
                                                                                    meta.id = "group1"
                                                                                    [ meta, signatures ]
                }
                input[1] = []
                input[2] = true // save_numpy_matrix
                input[3] = true // save_csv
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = SOURMASH_SKETCH.out.signatures.collect { it[1] }.map { signatures ->
                                                                                    def meta = [:]
                                                                                    meta.id = "group1"
                                                                                    [ meta, signatures ]
                }
                input[1] = []
                input[2] = true // save_numpy_matrix
                input[3] = true // save_csv
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.matrix.collect { file(it[1]).getName() } +
                                process.out.labels.collect { file(it[1]).getName() } +
                                process.out.csv.collect { file(it).getName() } +
                                process.out.versions ).match() }
            )
        }

    }

}
