nextflow_workflow {

    name "Test Workflow FASTQ_ALIGN_BWA"
    script "../main.nf"
    workflow "FASTQ_ALIGN_BWA"
    config "./nextflow.config"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "fastq_align_bwa"
    tag "subworkflows/fastq_align_bwa"
    tag "bwa/mem"
    tag "subworkflows/bam_sort_stats_samtools"

    setup {
        run("BWA_INDEX") {
            script "../../../../modules/nf-core/bwa/index/main.nf"
            process {
                """
                input[0] = [
                    [id: 'test'],
                    file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                ]
                """
            }
        }
    }

    test("sarscov2 - fastq - single_end") {

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true) ]
                ]
                input[1] = BWA_INDEX.out.index
                input[2] = false
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    test("sarscov2 - fastq - paired_end") {

        when {
            workflow {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                        file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true)
                    ]
                ]
                input[1] = BWA_INDEX.out.index
                input[2] = false
                input[3] = [[],[]]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }
}
