nextflow_process {

    name "Test Process ADAPTERREMOVAL"
    script "modules/nf-core/adapterremoval/main.nf"
    config "tests/modules/nf-core/adapterremoval/nextflow.config"
    process "ADAPTERREMOVAL"
    tag "adapterremoval"

    test("Single_End") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:true, collapse:false ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true)
                            ]

                input[1] = []
                """
            }
        }

        then {
            assert process.success

            // Assertion for output channel 0: singles_truncated
            assert process.out.singles_truncated.size() == 1
            with(process.out.singles_truncated[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == true
                assert get(0).collapse == false
                assert get(1) ==~ ".*/test.truncated.fastq.gz"
            }

            // Assertion for output channel 1: discarded
            assert process.out.discarded.size() == 1
            with(process.out.discarded[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == true
                assert get(0).collapse == false
                assert get(1) ==~ ".*/test.discarded.fastq.gz"
            }

            // Assertion for output channel 6: settings
            assert process.out.settings.size() == 1
            with(process.out.settings[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == true
                assert get(0).collapse == false
                assert get(1) ==~ ".*/test.settings"
            }

            // Assertion for output channel 7: versions
            assert process.out.versions.size() == 1
            assert process.out.versions[0] ==~ ".*/versions.yml"
        }

    }

    test("Paired_End") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false, collapse:false ], // meta map
                           [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                               file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true) ]
                           ]

                input[1] = []
                """
            }
        }

        then {
            assert process.success

            // Assertion for output channel 1: discarded
            assert process.out.discarded.size() == 1
            with(process.out.discarded[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == false
                assert get(0).collapse == false
                assert get(1) ==~ ".*/test.discarded.fastq.gz"
            }

            // Assertion for output channel 2: paired_truncated
            assert process.out.paired_truncated.size() == 1
            with(process.out.paired_truncated[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == false
                assert get(0).collapse == false
                assert get(1)[0] ==~ ".*/test.pair1.truncated.fastq.gz"
                assert get(1)[1] ==~ ".*/test.pair2.truncated.fastq.gz"
            }

            // Assertion for output channel 6: settings
            assert process.out.settings.size() == 1
            with(process.out.settings[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == false
                assert get(0).collapse == false
                assert get(1) ==~ ".*/test.settings"
            }

            // Assertion for output channel 7: versions
            assert process.out.versions.size() == 1
            assert process.out.versions[0] ==~ ".*/versions.yml"
        }

    }

    test("Paired_End_Collapse") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                                file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true) ]
                            ]

                input[1] = []
                """
            }
        }

        then {
            assert process.success

            // Assertion for output channel 1: discarded
            assert process.out.discarded.size() == 1
            with(process.out.discarded[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == false
                assert get(1) ==~ ".*/test.discarded.fastq.gz"
            }

            // Assertion for output channel 2: paired_truncated
            assert process.out.paired_truncated.size() == 1
            with(process.out.paired_truncated[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == false
                assert get(1)[0] ==~ ".*/test.pair1.truncated.fastq.gz"
                assert get(1)[1] ==~ ".*/test.pair2.truncated.fastq.gz"
            }

            // Assertion for output channel 6: settings
            assert process.out.settings.size() == 1
            with(process.out.settings[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == false
                assert get(1) ==~ ".*/test.settings"
            }

            // Assertion for output channel 7: versions
            assert process.out.versions.size() == 1
            assert process.out.versions[0] ==~ ".*/versions.yml"
        }

    }

    test("Paired_End_AdapterList") {

        when {
            process {
                """
                input[0] = [ [ id:'test', single_end:false, collapse:false ], // meta map
                            [ file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                                file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true) ]
                            ]
                input[1] = file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/adapterremoval/adapterremoval_adapterlist.txt", checkIfExists: true)

                """
            }
        }

        then {
            assert process.success

            // Assertion for output channel 1: discarded
            assert process.out.discarded.size() == 1
            with(process.out.discarded[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == false
                assert get(0).collapse == false
                assert get(1) ==~ ".*/test.discarded.fastq.gz"
            }

            // Assertion for output channel 2: paired_truncated
            assert process.out.paired_truncated.size() == 1
            with(process.out.paired_truncated[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == false
                assert get(0).collapse == false
                assert get(1)[0] ==~ ".*/test.pair1.truncated.fastq.gz"
                assert get(1)[1] ==~ ".*/test.pair2.truncated.fastq.gz"
            }

            // Assertion for output channel 6: settings
            assert process.out.settings.size() == 1
            with(process.out.settings[0]) {
                assert get(0).id == "test"
                assert get(0).single_end == false
                assert get(0).collapse == false
                assert get(1) ==~ ".*/test.settings"
            }

            // Assertion for output channel 7: versions
            assert process.out.versions.size() == 1
            assert process.out.versions[0] ==~ ".*/versions.yml"
        }

    }

}
