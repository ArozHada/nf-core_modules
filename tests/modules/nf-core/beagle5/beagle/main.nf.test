nextflow_process {

    name "Test Process BEAGLE5_BEAGLE"
    script "modules/nf-core/beagle5/beagle/main.nf"
    process "BEAGLE5_BEAGLE"
    config "tests/modules/nf-core/beagle5/beagle/nextflow.config"
    tag "beagle5_beagle"

    test("Beagle VCF") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/beagle/target.22Jul22.46e.vcf.gz", checkIfExists: true)
                           ]
                input[1] = []
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path("$outputDir/beagle5/test.bglout.vcf.gz"),
                                  path("$outputDir/beagle5/versions.yml")).match() },
                { assert new File("$outputDir/beagle5/test.bglout.log").exists() }
            )
        }
    }

    test("Beagle VCF With Ref") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/beagle/target.22Jul22.46e.vcf.gz", checkIfExists: true)
                           ]
                input[1] = file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/beagle/ref.22Jul22.46e.vcf.gz", checkIfExists: true)
                input[2] = []
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path("$outputDir/beagle5/test.bglout.vcf.gz"),
                                  path("$outputDir/beagle5/versions.yml")).match() },
                { assert new File("$outputDir/beagle5/test.bglout.log").exists() }    
            )
        }
    }

    test("Beagle VCF With Ref & Map") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test', single_end:false ], // meta map
                            file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/beagle/target.22Jul22.46e.vcf.gz", checkIfExists: true)
                           ]
                input[1] = file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/beagle/ref.22Jul22.46e.vcf.gz", checkIfExists: true)
                input[2] = file("https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/beagle/plink.chr22.GRCh38.map", checkIfExists: true)
                input[3] = []
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path("$outputDir/beagle5/test.bglout.vcf.gz"),
                                  path("$outputDir/beagle5/versions.yml")).match() },
                { assert new File("$outputDir/beagle5/test.bglout.log").exists() }
            )
        }
    }
}
