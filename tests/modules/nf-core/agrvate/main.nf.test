nextflow_process {

    name "Test Process AGRVATE"
    script "modules/nf-core/agrvate/main.nf"
    process "AGRVATE"
    config "tests/modules/nf-core/agrvate/nextflow.config"
    tag "agrvate"

    test("Sarscov2 Genome Fasta") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                             file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path("$outputDir/agrvate/genome-results/genome-agr_gp.tab"),
                                  path("$outputDir/agrvate/genome-results/genome-agr_operon.fna"),
                                  path("$outputDir/agrvate/genome-results/genome-blastn_log.txt"),
                                  path("$outputDir/agrvate/genome-results/genome-summary.tab"),
                                  path("$outputDir/agrvate/genome-results/genome-mummer/out.1coords"),
                                  path("$outputDir/agrvate/genome-results/genome-mummer/out.mcoords"),
                                  path("$outputDir/agrvate/genome-results/genome-mummer/out.qdiff"),
                                  path("$outputDir/agrvate/genome-results/genome-mummer/out.rdiff"),
                                  path("$outputDir/agrvate/genome-results/genome-mummer/out.snps"),
                                  path("$outputDir/agrvate/genome-results/genome-mummer/out.unqry"),
                                  path("$outputDir/agrvate/genome-results/genome-mummer/out.unref"),
                                  path("$outputDir/agrvate/versions.yml")).match() }
            )
        }

    }

}
