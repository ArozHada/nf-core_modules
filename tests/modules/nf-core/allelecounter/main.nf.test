nextflow_process {

    name "Test Process ALLELECOUNTER"
    script "modules/nf-core/allelecounter/main.nf"
    process "ALLELECOUNTER"
    config "tests/modules/nf-core/allelecounter/nextflow.config"
    tag "allelecounter"

    test("Sarscov2 Illumina PE Sorted BAM") {
        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                // define inputs of the process here. Example:
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam_bai'], checkIfExists: true)
                            ]
                input[1] = [ file(params.test_data['sarscov2']['genome']['test_bed'], checkIfExists: true) ]
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(params.outdir).list()).match("BAM") }
            )
        }

    }

    test("Sarscov2 Illumina PE Sorted CRAM") {
        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                // define inputs of the process here. Example:
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                            file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)
                           ]
                input[1] = [ file(params.test_data['homo_sapiens']['genome']['genome_bed'], checkIfExists: true) ]
                input[2] = [ file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true) ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(params.outdir).list()).match("CRAM") }
            )
        }

    }

}
