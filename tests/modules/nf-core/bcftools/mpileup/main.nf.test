nextflow_process {

    name "Test Process BCFTOOLS_MPILEUP"
    script "modules/nf-core/bcftools/mpileup/main.nf"
    process "BCFTOOLS_MPILEUP"
    config "tests/modules/nf-core/bcftools/mpileup/nextflow.config"
    tag "bcftools_mpileup"

    test("Sarcov2 Illumina PE Sorted BAM") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test' ], // meta map
                            [ file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true) ],
                            []
                           ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(params.outdir).list()).match() }
            )
        }
    }

    test("Sarcov2 Illumina PE Sorted BAM Save Mpileup") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test' ], // meta map
                            [ file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true) ],
                            []
                           ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = true
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(params.outdir).list()).match() }
            )
        }
    }

    test("Sarcov2 Illumina PE Sorted BAM With Intervals") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                            [ id:'test' ], // meta map
                            [ file(params.test_data['sarscov2']['illumina']['test_paired_end_sorted_bam'], checkIfExists: true) ],
                            [file(params.test_data['sarscov2']['genome']['test_bed'], checkIfExists: true)]
                           ]
                input[1] = file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(params.outdir).list()).match() }
            )
        }
    }
}
