nextflow_process {

    name "Test Process BCFTOOLS_VIEW"
    script "modules/nf-core/bcftools/view/main.nf"
    process "BCFTOOLS_VIEW"
    config "tests/modules/nf-core/bcftools/view/nextflow.config"
    tag "bcftools_view"

    test("Sarscov2 Illumina VCF") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [[ id:'out', single_end:false ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_vcf_gz'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test_vcf_gz_tbi'], checkIfExists: true)
                           ]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(params.outdir).list()).match("view") }
            )
        }
    }

    test("Sarscov2 Illumina VCF With Regions & Targets") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [[ id:'out', single_end:false ], // meta map
                            file(params.test_data['sarscov2']['illumina']['test_vcf_gz'], checkIfExists: true),
                            file(params.test_data['sarscov2']['illumina']['test_vcf_gz_tbi'], checkIfExists: true)
                           ]
                input[1] = file(params.test_data['sarscov2']['illumina']['test3_vcf_gz'], checkIfExists: true)
                input[2] = file(params.test_data['sarscov2']['illumina']['test2_vcf_targets_tsv_gz'], checkIfExists: true)
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(params.outdir).list()).match("view_with_regions_targets") }
            )
        }
    }
}
