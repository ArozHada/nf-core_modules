nextflow_process {

    name "Test Process BBMAP_CLUMPIFY"
    script "modules/nf-core/bbmap/clumpify/main.nf"
    process "BBMAP_CLUMPIFY"
    config "tests/modules/nf-core/bbmap/clumpify/nextflow.config"
    tag "bbmap_clumpify"

    test("Sarscov2 Illumina SE") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                             [  file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true) ]
                           ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path("$outputDir/bbmap/versions.yml"),
                                  path("$outputDir/bbmap/test.clumped.fastq.gz")).match("single_end") },
                { assert new File("$outputDir/bbmap/test.clumpify.log").exists() }
            )
        }
    }

    test("Sarscov2 Illumina PE") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                             [file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                              file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true) ]
                           ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path("$outputDir/bbmap/versions.yml"),
                                  path("$outputDir/bbmap/test_1.clumped.fastq.gz"),
                                  path("$outputDir/bbmap/test_2.clumped.fastq.gz")).match("paired_end") },
                { assert new File("$outputDir/bbmap/test.clumpify.log").exists() }
            )
        }
    }
}
