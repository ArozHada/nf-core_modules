nextflow_process {

    name "Test Process BBMAP_BBDUK"
    script "modules/nf-core/bbmap/bbduk/main.nf"
    process "BBMAP_BBDUK"
    config "tests/modules/nf-core/bbmap/bbduk/nextflow.config"
    tag "bbmap_bbduk"

    test("Sarscov2 Illumina SE") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                            [  file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true) ]
                           ]
                input[1] = []           
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path("$outputDir/bbmap/versions.yml"),
                                  path("$outputDir/bbmap/test.trim.fastq.gz")).match("single_end") },
                { assert new File("$outputDir/bbmap/test.trim.bbduk.log").exists() }
            )
        }
    }

    test("Sarscov2 Illumina SE With Reference") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                            [  file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true) ]
                           ]
                input[1] = [file(params.test_data['sarscov2']['genome']['transcriptome_fasta'], checkIfExists: true) ] // transciptome file - remove contaminants (*trim.fastq files empty)          
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path("$outputDir/bbmap/versions.yml"),
                                  path("$outputDir/bbmap/test.trim.fastq.gz")).match("single_end_with_ref") },
                { assert new File("$outputDir/bbmap/test.trim.bbduk.log").exists() }
            )
        }
    }

    test("Sarscov2 Illumina PE") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                             [  file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                                file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true) ]
                           ]
                input[1] = []         
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path("$outputDir/bbmap/versions.yml"),
                                  path("$outputDir/bbmap/test.trim_1.fastq.gz"),
                                  path("$outputDir/bbmap/test.trim_2.fastq.gz")).match("paired_end") },
                { assert new File("$outputDir/bbmap/test.trim.bbduk.log").exists() }
            )
        }
    }

    test("Sarscov2 Illumina PE With Reference") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                             [  file(params.test_data['sarscov2']['illumina']['test_1_fastq_gz'], checkIfExists: true),
                                file(params.test_data['sarscov2']['illumina']['test_2_fastq_gz'], checkIfExists: true) ]
                           ]
                input[1] = [file(params.test_data['sarscov2']['genome']['transcriptome_fasta'], checkIfExists: true) ]        
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path("$outputDir/bbmap/versions.yml"),
                                  path("$outputDir/bbmap/test.trim_1.fastq.gz"),
                                  path("$outputDir/bbmap/test.trim_2.fastq.gz")).match("paired_end_ref") },
                { assert new File("$outputDir/bbmap/test.trim.bbduk.log").exists() }
            )
        }
    }
}
